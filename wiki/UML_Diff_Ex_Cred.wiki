= Intent =

This is the extra credit portion of phase 2; describing the differences between our two UML's.
Whether this should be a separate file, or be included within the Technical Report is to be determined.
Would be a good touch to include both UML's here if it's on it's own (I think it's probably in the technical report though).
NOTE: Should I have included the containing lists in the UML?

= Comparison =

Our two models are fairly similar, although their UML's look vastly different. The XML UML has an over arching site class that holds an optional instance of crises, people, and organizations. Each of those classes point to 1 or more instances of their respective inner classes: crisis, person, and organization. Then the two models start showing their similarities. The GAE datastore UML, has one large class for each of crises, people, and organizations, that it throws instances of into lists named relatively to what they store.
The GAE classes look very similar to the XML's inner classes, containing all the XML's elements, and it represents the composition relationships as single StringList instead of having the layers of abstraction. Their related<type> elements are used to relate to instances of the other classes. Because of the compaction of this relationship, in the GAE, it's directly 0 or more, while the XML has a required layer, an optional layer, and finally a layer of 1 or more.
In conclusion, the GAE datastore UML is most easily summarized as a compact form of XML UML.